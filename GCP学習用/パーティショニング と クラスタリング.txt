/*
【パーティショニング と クラスタリングについて】
パーティショニング と クラスタリング は、BigQuery のテーブルにおけるデータの最適化技術で、主にクエリのパフォーマンス向上とコスト削減を目的としています。
*/


/*
【パーティショニング】
1. パーティショニング (Partitioning)
パーティショニングは、テーブルのデータを分割して保存し、クエリが効率的に必要な部分だけをスキャンできるようにする技術です。BigQueryでは、通常日付列やタイムスタンプ列を使ってパーティションを分けます。これにより、指定された期間（例えば、1日、1ヶ月）に関連するデータだけをスキャンし、処理の効率化とコスト削減が可能となります。

主な特徴
パーティションの作成: 日付列やタイムスタンプ列を基準に、テーブルのデータを時間的な単位（例: 1日、1ヶ月）で分割します。これにより、大量のデータが格納されている場合でも、必要なデータだけを迅速に取得できます。
クエリのパフォーマンス向上: WHERE句で特定の期間を指定することで、その期間に該当するパーティションだけがスキャンされるため、クエリのスキャン対象が限定され、パフォーマンスが向上します。
メタデータ: パーティションを分けることでメタデータが増加しますが、BigQueryはパーティション分割されたテーブルのメタデータを維持することができます。
パーティションの自動管理: 新しいデータが追加されると、そのデータに基づいて新しいパーティションが自動的に作成されます。これにより、管理者は手動でパーティションを作成する必要がありません。
例: 日付列でパーティショニングされたテーブルの作成

CREATE OR REPLACE TABLE my_dataset.my_table
(
  eventDate DATE,
  eventType STRING,
  eventValue INT64
)
PARTITION BY eventDate;
パーティションを利用したクエリ
sql
コピーする
SELECT *
FROM my_dataset.my_table
WHERE eventDate BETWEEN '2023-01-01' AND '2023-01-03';
このクエリは、指定された日付範囲に該当するパーティションのみをスキャンします。
*/



/*
【クラスタリング】
2. クラスタリング (Clustering)
クラスタリングは、テーブル内のデータを指定した列に基づいて並べ替え、特定の列でフィルタリングや集計が行われる際に、クエリのパフォーマンスを向上させる技術です。クラスタリングにより、類似した値がテーブル内の近くに配置されるため、必要なデータのスキャン量を減らし、クエリ処理時間を短縮できます。

主な特徴
データの並べ替え: クラスタリング列に基づいてデータを並べ替えます。これにより、特定の列でフィルタリングや集計が行われる際に、クエリが高速化します。
パフォーマンス向上: クラスタリングを使用することで、特定の列に基づいて必要なデータをすばやくスキャンできます。特に、大規模なデータセットにおいては、パフォーマンスの改善が顕著です。
自動再クラスタリング: BigQueryでは、クラスタリングによる並べ替えが時間と共に劣化する可能性がありますが、現在は自動的に再クラスタリングが行われます。この機能により、データが追加される度に最適化されるため、手動での再クラスタリング作業が不要になります。
例: イベント日付でパーティショニングし、ユーザーIDでクラスタリング


CREATE OR REPLACE TABLE my_dataset.my_table
(
  eventDate DATE,
  userId STRING,
  eventType STRING,
  eventValue INT64
)
PARTITION BY eventDate
CLUSTER BY userId;
クラスタリングを利用したクエリ
sql
コピーする
SELECT userId, COUNT(*)
FROM my_dataset.my_table
WHERE eventDate BETWEEN '2023-01-01' AND '2023-01-03'
GROUP BY userId;
このクエリでは、eventDateでパーティショニングされ、userIdでクラスタリングされているため、userIdでの集計が効率的に行われます。
*/