/*
【概要】
BigQueryを利用した非正規化およびネストされたフィールド、繰り返しフィールドの活用方法に関する具体例
*/

/*
元のデータ（正規化されたデータ）
まず、通常の正規化されたデータテーブルの例を見てみましょう。例えば、注文に関するデータを格納したテーブルがあり、顧客と注文、注文の詳細に関する情報が分かれている場合です。

注文テーブル（正規化）
OrderID	CustomerID	OrderDate
1	101	2025-03-15
2	102	2025-03-16
注文詳細テーブル（正規化）
OrderDetailID	OrderID	ProductID	Quantity
1	1	P001	3
2	1	P002	2
3	2	P003	5
この場合、OrderID というキーを使って、顧客情報や注文の詳細情報を別々のテーブルに分けています。

2. 非正規化およびネストされたフィールドの使用
BigQueryでの効率的な処理のため、非正規化されたデータとして格納し、ネストされたフィールドや繰り返しフィールドを利用する方法を見てみましょう。これにより、クエリがより効率的に処理され、並列処理のパフォーマンスが向上します。

非正規化およびネストされたフィールドのテーブル例
OrderID	CustomerID	OrderDate	OrderDetails
1	101	2025-03-15	[{ProductID: "P001", Quantity: 3}, {ProductID: "P002", Quantity: 2}]
2	102	2025-03-16	[{ProductID: "P003", Quantity: 5}]
この非正規化されたテーブルでは、OrderDetails がネストされた繰り返しフィールド（配列）として格納されています。このようにすることで、注文の詳細情報（ProductIDとQuantity）がOrderIDごとにまとめて格納され、関連するデータを一度に取得できるようになります。

3. BigQueryでのネストされたフィールドと繰り返しフィールドの処理
この構造により、以下のようにデータをクエリで効率的に処理できます。

クエリ例：特定の注文に関する詳細情報を取得する
sql
コピーする
SELECT
  OrderID,
  CustomerID,
  OrderDate,
  OrderDetails.ProductID,
  OrderDetails.Quantity
FROM
  `your_project.your_dataset.orders`
WHERE
  OrderID = 1;
このクエリでは、OrderDetailsというネストされたフィールドをフラット化してアクセスできます。これにより、元々複数のテーブルに分かれていた情報を、一度のクエリで効率よく取得できます。

4. 並列処理の利点
BigQueryは、ネストされたフィールドや繰り返しフィールドをサポートしており、これによりスロット間で処理を分散させ、並列処理を効率的に実行できます。このため、複雑な結合やシャッフル操作を避け、クエリのパフォーマンスを向上させることができます。

5. ハイブリッドソリューションの活用
BigQueryを既存のリレーショナルデータベースと組み合わせて使う場合、データをBigQueryにインポートする際に、ネストされたフィールドや繰り返しフィールドを活用することが特に重要です。この手法により、従来のリレーショナルデータベースの構造を活かしつつ、BigQueryの強力な並列処理機能を最大限に活用できます。

まとめ
正規化されたデータはデータの整合性を保つ一方で、複雑なクエリや結合操作を必要とし、パフォーマンスに影響を与えることがあります。
非正規化とネストされたフィールドを使用すると、データ取得が効率化され、クエリのパフォーマンスが向上します。
BigQueryでは、繰り返しフィールドやネストされたフィールドを使うことで、リレーショナルデータベースの構造を維持しながら、効率的な並列処理が可能になります。
これにより、データウェアハウスのスキーマ設計でBigQueryを使用する際、正規化と非正規化を適切に使い分けることが重要
*/