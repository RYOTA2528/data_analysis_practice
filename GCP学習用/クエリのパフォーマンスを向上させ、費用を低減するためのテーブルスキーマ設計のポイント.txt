1. ネストされた繰り返しフィールドを使用する
効率的な設計: リレーショナルデータベースでは、異なるテーブルを結合して関連付けますが、BigQueryではネストされた繰り返し列（例：purchase_item）を使うことで、データを1行にまとめ、クエリのパフォーマンスが大幅に向上します。これにより、結合操作を避けることができ、データの読み込み速度が早くなります。
2. 配列型の活用
配列データ型: BigQueryはネイティブで配列型をサポートしており、配列を活用することでデータ構造が効率的に整理できます。例えば、注文テーブル内に複数の購入品目を配列で格納することで、注文ごとの関連データを1行で保持できます。
3. ディメンションテーブルが10GB未満の場合は正規化
小規模テーブルの場合: データサイズが小さければ、テーブルを正規化して結合する方が適切です。特に、10GB未満のディメンションテーブルでは正規化された状態を維持して、必要な情報を結合しやすくします。
4. データサイズが10GB以上の場合は非正規化を検討
大規模データの場合: データセットやテーブルのサイズが大きくなると、結合によるパフォーマンスへの影響が大きくなるため、非正規化したデータを使う方が適切になります。データをフラット化して一つのテーブルにまとめることで、クエリが高速になり、コストが低くなります。
5. UPDATEやDELETEが少ない場合の例外
更新頻度が低い場合: UPDATEやDELETEの操作がほとんど行われないテーブルでは、ネストされた繰り返しフィールドを活用した非正規化も有効です。これにより、データの読み取りとクエリ実行が効率化されます。
まとめ:
10GB未満のデータ: 正規化して結合。
10GB以上のデータ: 非正規化して、ネストされた繰り返しフィールドを活用。
配列と構造体の活用: BigQueryではこれらを使うことで、クエリパフォーマンスと費用を最適化できます。
