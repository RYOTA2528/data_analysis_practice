// Snowflake REST APIs を使用するときにサーバーに対して認証する方法
リクエストを送信する場合、リクエストには以下のいずれかを使用する認証情報が含まれている必要があります。

キーペア認証の使用

OAuth の使用

※[キーペア認証の使用]こちらを使用


【ステップ①】：キーペア認証を設定する

このプロセスの一環として、次を実行する必要があります。

1.公開キーと秘密キーのペアを生成します。生成された秘密キーはファイル内にある必要があります（例: rsa_key.p8 という名前）。

2.公開キーをSnowflakeユーザーに割り当てます。ユーザーにキーを割り当てたら、 DESCRIBE USER コマンドを実行します。出力では、 RSA_PUBLIC_KEY_FP プロパティは、ユーザーに割り当てられた公開キーのフィンガープリントに設定する必要があります。


---------------------------【1.2のために秘密鍵・公開鍵の設定方法は以下】---------------------------

※秘密キーを生成
↓
秘密キーは、暗号化バージョンまたは非暗号化バージョンのいずれかを生成できます。
（非暗号化バージョンを生成）
openssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out rsa_key.p8 -nocrypt

（暗号化バージョンを生成）
openssl genrsa 2048 | openssl pkcs8 -topk8 -v2 des3 -inform PEM -out rsa_key.p8


出力結果イメージ：
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIE6T...
-----END ENCRYPTED PRIVATE KEY-----


※公開キーを生成
次のコマンドでは、秘密キーが暗号化され、 rsa_key.p8 という名前のファイルに含まれていると仮定

openssl rsa -in rsa_key.p8 -pubout -out rsa_key.pub


出力結果イメージ：
-----BEGIN PUBLIC KEY-----
MIIBIj...
-----END PUBLIC KEY-----


①.Snowflakeユーザーに公開キーを割り当てる

ALTER USER example_user SET RSA_PUBLIC_KEY='MIIBIjANBgkqh...';


※ユーザーの公開キーのフィンガープリントを検証する
※つまり、Snowflake に登録した ユーザーの公開キー が、手元の公開キーと一致しているかを確認します。

1.ユーザーの公開キーのフィンガープリントを取得
DESC USER example_user;
SELECT SUBSTR((SELECT "value" FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))
  WHERE "property" = 'RSA_PUBLIC_KEY_FP'), LEN('SHA256:') + 1);

出力結果イメージ：
Azk1Pq...

③．ローカル（手元）の公開キーからフィンガープリントを作成
次に、手元にある公開キー（例：rsa_key.pub）を使って、同じ方法でフィンガープリントを作成
openssl rsa -pubin -in rsa_key.pub -outform DER | \
openssl dgst -sha256 -binary | \
openssl enc -base64


出力結果イメージ：
writing RSA key
Azk1Pq...


両方の出力を比較
Snowflake の出力
Azk1Pq...
ローカルの出力
Azk1Pq...
 一致していれば公開キーの設定は正しい です。

③.キーペア認証を使用するようにSnowflakeクライアントを設定

1.構成ファイルまたはコマンドラインのいずれかで、秘密キーファイルへのパスを指定
(接続設定に private_key_path 接続パラメーターを追加し、作成した秘密鍵ファイルへのローカルパスを指定します。)

private_key_path = <path>/rsa_key.p8

2.SNOWSQL_PRIVATE_KEY_PASSPHRASE 環境変数を使用して、秘密鍵ファイルを復号化するためのパスフレーズを設定

export SNOWSQL_PRIVATE_KEY_PASSPHRASE=<passphrase> Linux
set SNOWSQL_PRIVATE_KEY_PASSPHRASE='<passphrase>' Windows


3.private-key-path 接続パラメーターを含めて、暗号化された秘密鍵ファイルへのパスを指定
$ snowsql -a <account_identifier> -u <user> --private-key-path <path>/rsa_key.p8


④.キーペアローテーションの構成
(補足：、 ALTER USER の RSA_PUBLIC_KEY および RSA_PUBLIC_KEY_2 パラメーターを使用して、最大2個の公開キーを1人のユーザーに関連付けることができます。)
次の更新を使用して、 キーペア認証の構成 のステップすべてを完了します。

１.新しい秘密キーと公開キーのセットを生成します。

ユーザーに公開キーを割り当てます。公開キーの値を、 RSA_PUBLIC_KEY または RSA_PUBLIC_KEY_2 のいずれかのうち現在使用されていないキーの値に設定します。
例: ALTER USER example_user SET RSA_PUBLIC_KEY_2='JERUEHtcve...';


２.Snowflakeに接続するようにコードを更新します。新しい秘密キーを指定します。
Snowflakeは、接続情報とともに送信された秘密キーに基づいて、認証用の正しいアクティブな公開キーを検証します。


３．ALTER USER コマンドを使用し、ユーザープロファイルから古い公開キーを削除します。

ALTER USER example_user UNSET RSA_PUBLIC_KEY;


------------------------------------------------------

【ステップ②】：生成された秘密キーを使用して Snowflake に接続 できることを確認する

$ snowsql -a <account_identifier> -u <user> --private-key-path <path>/rsa_key.p8



【ステップ③】JWT トークンの生成
（※重要※
Postmanではリクエストを認証するためにリクエストヘッダーに JWT トークンを必要とします。）

----------------------------------

WT（JSON Web Token）とは？
JWT は、以下の3つの部分で構成されるトークン形式です：

ヘッダー（Header）
→ トークンのタイプや署名アルゴリズムの情報が入っている
例: { "alg": "RS256", "typ": "JWT" }

ペイロード（Payload）
→ ユーザー情報や権限などのデータを含む
例: { "sub": "user@example.com", "exp": 1715600000 }

署名（Signature）
→ 上記の内容に対し、秘密鍵で署名したもの（改ざん防止）

この3つを . でつなげた文字列が JWT です。

-----------------------------------



アプリケーション・コード内で JWT トークンを生成するには、以下の手順を使用

①.ユーザーの公開キーのフィンガープリント（SHA-256ハッシュ）を生成
（フィンガープリントの前に SHA256: を付けます。）
SHA256:＜フィンガープリントのハッシュ＞

もしくは、SQL DESCRIBE USER コマンドを実行して、 RSA_PUBLIC_KEY_FP プロパティから値を取得できます


②.JWT のペイロードを作成
JWT には以下の情報が必要です：

フィールド	説明	例
iss	発行者	MYORG-MYACCOUNT.MYUSER.SHA256:Azk1Pq3h...XYZ
sub	件名	MYORG-MYACCOUNT.MYUSER
iat	発行時刻（Unix時間）	1715600000
exp	有効期限（発行時刻から最大1時間）	1715603600

③.JWTコードで生成（Python の例）

pip install pyjwt cryptography


import jwt
import time

# フィンガープリント（SHA256:付き）
fingerprint = "SHA256:Azk1Pq3h...XYZ"

# アカウント識別子（大文字で）
account_identifier = "MYORG-MYACCOUNT"
user = "MYUSER"

# 現在時刻
now = int(time.time())

# JWTペイロード
payload = {
    "iss": f"{account_identifier}.{user}.{fingerprint}",
    "sub": f"{account_identifier}.{user}",
    "iat": now,
    "exp": now + 3600  # 最大1時間
}

# 秘密鍵（.p8ファイル）を読み込み
with open("rsa_key.p8", "r") as f:
    private_key = f.read()

# JWT 生成（RS256署名）
encoded_jwt = jwt.encode(payload, private_key, algorithm="RS256")

print("JWT Token:")
print(encoded_jwt)


④リクエストで使う HTTP ヘッダー（Postman用)

Authorization: Bearer <生成したJWTトークン>
X-Snowflake-Authorization-Token-Type: KEYPAIR_JWT


⑤snowsql で使う例
snowsql -a MYORG-MYACCOUNT -u MYUSER --authenticator=oauth --token <JWT_TOKEN>








