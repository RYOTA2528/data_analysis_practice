■ VIEW
マテリアライズドビュー（Materialized View）
概要
マテリアライズドビューは、ビューのクエリ結果を物理的に保存しておく仕組みです。

通常のビューはクエリを実行するたびに基となるテーブルを参照して結果を返しますが、マテリアライズドビューは計算結果を事前に保存しておくため、クエリのパフォーマンスが向上します。

Snowflakeでは、マテリアライズドビューは自動的にインクリメンタルで更新されます。

使いどころ
重たい集計や結合の結果を頻繁に使う場合に効果的

リアルタイム性は多少犠牲にしても高速な読み込みを優先したい場合


CREATE MATERIALIZED VIEW sales_summary_mv AS
SELECT
    region,
    product_category,
    SUM(sales_amount) AS total_sales,
    COUNT(*) AS sales_count
FROM sales

GROUP BY region, product_category;
この例では、sales テーブルの地域と商品カテゴリごとの売上合計と売上件数を事前計算して保存します。マテリアライズドビューに対してクエリを実行すると高速に結果が得られます。


2. セキュアビュー（Secure View）
概要
セキュアビューは、ビューの定義や基となるテーブルの詳細（列名やデータ型など）を隠蔽しつつ、ユーザーに安全にアクセス権限を与えたい場合に使います。

セキュアビューの中身は暗号化されていて、ビューの定義が外部に漏れにくいです。

データマスキングや情報漏えい防止の観点で使われます。

使いどころ
データベースのメタ情報や複雑なロジックを秘匿したいとき

共有先に特定の列だけを見せたい場合の制御




CREATE SECURE VIEW sensitive_customer_view AS
SELECT
    customer_id,
    -- 氏名はマスクして表示
    CONCAT(SUBSTRING(customer_name, 1, 1), '***') AS masked_name,
    email
FROM customers
WHERE region = 'APAC';
このビューは顧客名の一部をマスクしつつ、特定地域の顧客だけを抽出して提供しています。ビュー定義は安全に管理されます。

---------------------------------------------------------------------------
■ result_scan
RESULT_SCANとは？
Snowflakeの RESULT_SCAN 関数は、直前に実行したクエリの結果を参照するための関数です。

クエリID（query_id）を使って、そのクエリの結果セットを再利用できる。

たとえば、ある重たいクエリの結果を一時的に再利用したい場合などに便利です。

基本構文

SELECT * FROM TABLE(RESULT_SCAN('クエリID'));
'クエリID' は対象のクエリの実行ID（SnowflakeのUIやクエリ履歴から確認可能）。

例
ステップ1：クエリを実行する

SELECT region, product, SUM(sales_amount) AS total_sales
FROM sales
GROUP BY region, product;
このクエリの実行IDは、SnowflakeのUIのクエリ履歴で確認できます。仮に '01a2b3c4-5678-90de-f123-4567890abcde' とします。

ステップ2：RESULT_SCANで結果を再利用する

SELECT *
FROM TABLE(RESULT_SCAN('01a2b3c4-5678-90de-f123-4567890abcde'))
WHERE total_sales > 10000;
この例では、前のクエリ結果から売上が10,000以上の行だけを絞り込んでいます。

---------------------------------------------------------------------------
■ API INTEGRATION（Lambda関数を呼び出す例）
1. Lambda関数を用意する
def lambda_handler(event, context)
    name = event.get('name', 'World')
    return {
        'statusCode' : 200,
        'body': f'Hello, {name} from Lambda!'

2. API GatewayでLambdaをHTTP公開
CREATE OR REPLACE API INTEGRATION my_api_integration
    API_PROVIDER = aws_api_gateway
    API_AWS_ROLE_ARN = '<AWS IAM Role ARN>'
    ENABLED = TRUE;

3. Snowflakeで外部関数を設定
CREATE OR REPLACE EXTARNAL FUNCTION call_lambda(name STRING)
    RETURNS STRING
    API_INTEGRATION = my_api_integration
    HEADERS = ('Content-Type = 'application/json')
    MAX_BATCH_ROWS = 1
    AS 'https://<your-api-gateway-url>'

4. Snowflakeから呼び出す
SELECT call_lambda('ChatGPT');

---------------------------------------------------------------------------
■ UDF(ユーザ定義関数)とプロシージャを組み合わせた例
例の概要
UDF: 入力された数値を2倍にする関数
プロシージャ: テーブルから数値を取得して、UDFを呼び出して結果をログに出す

1. サンプルテーブル作成
CREATE OR REPLACE TABLE sample_numbers(
    id INT,
    num INT
);
INSERT INTO smaple_numbers VALUE (1,10),(2,20),(3,30);

2. UDFを作成（数値を2倍にする）
CREATE OR REPLACE FUNCTION double_num(n INT)
REATRUNS INT
LANGUAGE SQL
AS
$$
    SELECT n * 2;
$$;

3. ストアドプロシージャを作成（UDFを呼び出しながら処理）
CREATE OR REPLACE PROCEDURE process_numbers()
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE　#SQLストアドプロシージャの中で使う変数やカーソルを宣言している場所
  result_msg STRING DEFAULT '';
  v_id INT;
  v_num INT;
  v_doubled INT;
  CURSOR c1 FOR SELECT id, num FROM sample_numbers ORDER BI id
BEGIN
  FOR rec IN c1 DO
    LET v_id = rec.id;
    LET v_num = rec.num;
    LET v_doubled = (SELECT double_num(v_num));
    
    LET result_msg = result_msg || 'id=' || v_id || ', original=' || v_num || ', doubled=' || v_doubled || '\n';
  END FOR;

  RETURN result_msg;
END;
$$;

CALL process_numbers_sql();



