// タスクの準備
CREATE OR REPLACE TRANSIENT DATABASE TASK_DB;

CREATE OR REPLACE TABLE CUSTOMERS (
  CUSTOMER_ID INT AUTOINCREMENT STRAT = 1 INCREMENT =1,
  FIRST_NAME VARCHAR(40) DEFAULT 'JENNIFER',
  CREATE_DATE DATE
);


--実際にタスクを作成
CREATE OR REPLACE TASK CUSTOMER_INSERT
    WAREHOUSE = COMPUTE_WH
    SCHEDULE = '1 MINUTE' #1分ごとにデータが挿入される
    AS
    INSERT INTO CUSTOMERS(CREATE_DATE) VALUES(CURRENT_TIMESTAMP);

SHOW TASKS;

-- タスクの再開と停止
ALTER TASK CUSTOMER_INSERT RESUME;
ALTER TASK CUSTOMER_INSERT SUSPEND;

SELECT * FROM CUSTOMERS;


-- クーロンによるタスクの設定
CREATE OR REPLACE TASK CUSTOMER_INSERT
    WAREHOUSE = COMPUTE_WH
    SCHEDULE = 'USING CRON 0 16,19 * * 5L Asia/Tokyo' #「その月の最後の金曜日」の日本時刻に16時と19時実行される
    AS
    INSERT INTO CUSTOMERS(CREATE_DATE) VALUES(CURRENT_TIMESTAMP);

/*
minute(0-59)
hour(0-23)
day of month (1-31, or L)
month (1-12, JAN-DEC)
day of week (0-6, SUN-SAT, or L)
***** :毎日
*/

/*
-- 毎日 午前9時に実行（日本時間）
SCHEDULE = 'USING CRON 0 9 * * * Asia/Tokyo'

-- 毎週月曜日の午前6時に実行
SCHEDULE = 'USING CRON 0 6 * * 1 Asia/Tokyo'

-- 毎月1日の午前8時に実行
SCHEDULE = 'USING CRON 0 8 1 * * Asia/Tokyo'

-- 毎日 3時間ごと（0時, 3時, 6時, ...）に実行
SCHEDULE = 'USING CRON 0 */3 * * * Asia/Tokyo'

-- 毎週金曜日の17時（夕方5時）に実行
SCHEDULE = 'USING CRON 0 17 * * 5 Asia/Tokyo'

-- 毎月の最終金曜日に実行（例：月末の集計などに便利）
SCHEDULE = 'USING CRON 0 18 * * 5L Asia/Tokyo'

-- 平日のみ（⽉〜⾦）毎朝8時に実行
SCHEDULE = 'USING CRON 0 8 * * 1-5 Asia/Tokyo'

-- 特定の月（1月, 4月, 7月, 10月）1日の0時に実行（四半期初日）
SCHEDULE = 'USING CRON 0 0 1 1,4,7,10 * Asia/Tokyo'
*/

/*(補足)
日本時刻はUTC+9時間後
*/


---実践---
-- 複数タスクを実装
--まずは実行中のタスクを止めないと作成できない
ALTER TASK CUSTOMER_INSERT SUSPEND;
--子タスクを作成
CREATE OR REPLACE TASK CUSTOMER_INSERT2
    WAREHOUSE = COMPUTE_WH
    AFTER CUSTOMER_INSERT　-- 依存関係を指定：CUSTOMER_INSERT 完了後に起動
    AS
    INSERT INTO CUSTOMERS2 SELECT * FROM CUSTOMERS;

-- 別タスク用
CREATE OR REPLACE TABLE CUSTOMERS3 (
    CUSTOMER_ID INT,
    FIRST_NAME VARCHAR(40),
    CREATE_DATE DATE,
    INSERT_DATE DATE DEFAULT DATE(CURRENT_TIMESTAMP)
);

-- 3つ目のタスクを作成
CREATE OR REPLACE TASK CUSTOMER_INSERT3
    WAREHOUSE = COMPUTE_WH
    AFTER CUSTOMER_INSERT2
    AS
    INSERT INTO CUSTOMERS (CUSTOMER_ID, FIRST_NAME, CREATE_DATE) SELECT * FROM CUSTOMERS2

SHOW TASKS;

ALTER TASK CUSTOMER_INSERT SUSPEND;

ALTER TASK CUSTOMER_INSERT RESUME;

-- 上記依存するすべての救を再帰的にレジュームする方法
SELECT SYSTEM$TASK_DEPENDENTS_ENABLE('<親task_name>')

---実践---
-- タスクとストアプロシージャ
CREATE OR REPLACE PROCEDURE setup_task_chain(CREATE_DATE varchar)
RETURNS STRING NOT NULL
LANGUAGE SQL
AS
$$
BEGIN

  -- STEP 1: 既存の親タスク CUSTOMER_INSERT を一時停止（なければ無視）
  BEGIN
    ALTER TASK CUSTOMER_INSERT SUSPEND;
  EXCEPTION
    WHEN STATEMENT_ERROR THEN
      -- 例外を無視（すでに停止状態など）
      RETURN 'CUSTOMER_INSERT suspend failed or not needed.';
  END;

  -- STEP 2: 子タスク CUSTOMER_INSERT2 を作成
  CREATE OR REPLACE TASK CUSTOMER_INSERT2
    WAREHOUSE = COMPUTE_WH
    AFTER CUSTOMER_INSERT
    AS
    INSERT INTO CUSTOMERS2 SELECT * FROM CUSTOMERS;

  -- STEP 3: CUSTOMERS3 テーブルを作成（存在しない場合）
  CREATE OR REPLACE TABLE CUSTOMERS3 (
    CUSTOMER_ID INT,
    FIRST_NAME VARCHAR(40),
    CREATE_DATE DATE,
    INSERT_DATE DATE DEFAULT DATE(CURRENT_TIMESTAMP)
  );

  -- STEP 4: タスク CUSTOMER_INSERT3 を作成（CUSTOMER_INSERT2 の後）
  CREATE OR REPLACE TASK CUSTOMER_INSERT3
    WAREHOUSE = COMPUTE_WH
    AFTER CUSTOMER_INSERT2
    AS
    INSERT INTO CUSTOMERS (CUSTOMER_ID, FIRST_NAME, CREATE_DATE)
    SELECT * FROM CUSTOMERS2;

  -- STEP 5: 親タスクを再開
  ALTER TASK CUSTOMER_INSERT RESUME;

  RETURN 'Task chain created and resumed.';

END;
$$;

--上記を１分ごとに実行
CREATE OR REPLACE TASK RUN_SETUP_TASK_CHAIN
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = '1 MINUTE'
AS
CALL setup_task_chain(TO_VARCHAR(CURRENT_DATE));


---実践---
-- タスクの実行履歴をinformation_schemaから確認する
SELECT * from table(information_schema.task_history())
order by scheduled_time desc;

-- フィルタリングして検索
select * from table(information_schema.task_history(
scheduled_time_range_start=>dateadd('hour', -4, current_timestamp()),
result_limit => 5,
task_name=>'CUSTOMER_INSERT2'
));

-- 以下時刻でのフィルタリングをする際にtimestampの形式を把握するために使用
select to_timestamp_ltz(current_timestamp)

-- 一定自時刻でフィルターする
select * from table(information_schema.task_history(
  scheduled_time_range_start=>to_timestamp_ltz('2021-04-22 11:28:32.776 -0700'),
  scheduled_time_range_end=>to_timestamp_ltz('2021-04-22 11:35:32.776 -0700')
));



