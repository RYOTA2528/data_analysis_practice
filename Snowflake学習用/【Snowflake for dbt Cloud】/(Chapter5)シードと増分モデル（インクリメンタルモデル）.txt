シード（Seed）とは？
CSVファイルを使って、Snowflakeにテーブルとして取り込む仕組み。

小さくて変更が少ない「マスターデータ」などにぴったり。

✅ 使い道の例
国コードや地域名の一覧

除外するユーザーIDのリスト

マッピングテーブル（IDと名前の対応など）

✅ メリット
Gitでバージョン管理できる（他のモデルと同じ）

テスト・ドキュメント化も可能

コマンドはこれだけ：

bash
コードをコピーする
dbt seed
🔁 増分モデル（Incremental Model）とは？
大きなデータセットの一部だけ更新して、処理時間を短縮する仕組み。

毎回全データを再計算せず、「新しく増えたデータだけ」を追加する。

✅ メリット
速い！（全件処理しない）

コスト削減（コンピューティング時間が短くなる）

べき等性あり（再実行しても問題ない）

✅ 動き方
最初の dbt run → テーブルを 全部作る

2回目以降の dbt run → 新しい行だけ追加（例えば、日付やIDで判定）

sql
コードをコピーする
-- 例：新しい注文だけ追加する
{{ config(materialized='incremental') }}

select *
from {{ ref('orders') }}
where order_date > (select max(order_date) from {{ this }})



------------------------------------------------------
実際に以下増分モデルを実装
-- 増分モデルを作成
-- nations（国）テーブルを更新して、販売地域(region_key)の変更や追加に対応したい
{{
    config(
        materialized='incremental',      -- モデルを「増分テーブル」として構築（初回は全件、以降は追加・更新のみ）
        unique_key='nation_key'          -- 一意のキーとして nation_key を使用（更新対象の特定に使用される）
    )
}}

-- CTE: nations モデル（シード由来）を参照
with source as (

    select * from {{ ref('nations') }}  -- ref関数で依存関係を明示しつつ nations モデルを参照

),

-- CTE: 列名をわかりやすく変更（標準化・命名一貫性のため）
renamed as (

    select
        n_nationkey as nation_key,            -- 国キー（主キー）
        n_name as name,                       -- 国名
        n_regionkey as region_key,            -- 地域キー
        last_updated_date as last_updated_date -- 最終更新日時（増分の判定に使用）
    from source

)

-- 出力する結果を選択（初回は全件、増分時は下のフィルターが適用される）
select * from renamed

-- 以下は「増分実行時のみ」適用される条件（初回には無視される）
{% if is_incremental() %}

  -- 現在のテーブルにある最大の更新日時よりも新しいデータのみを対象とする
  -- これにより、変更または追加された行だけが処理される（前回以降の差分）
  where last_updated_date > (select max(last_updated_date) from {{ this }})

{% endif %}

