ソース（sources）とは？
生データを定義・説明する仕組み：データウェアハウス内の既存テーブル（例: orders, lineitem）に意味付け。

利点：

系統の追跡が可能に（どの生データから派生したか）

テスト・ドキュメント化が可能に（信頼性アップ）

🔹 ステージングモデル（staging models）とは？
ソーステーブルと1:1対応する中間モデル

主な処理内容：

列名の変更（snake_case → user_friendly_name）

データ型の再キャスト

必要な列だけ選択

目的：

下流のモデル開発を効率化（モジュール化 & DRY原則）

変更に強い構造に（1か所直すだけで済む）



--------------------------------------------

【ソースファイルを作成】
変換にはスキーマのテーブルordersとテーブルを使用し、これらのテーブルをプロジェクトのソースとして作成します
次のファイルパスで、新しいファイルを作成(models/staging/tpch/tpch_sources.yml)

version: 2  # dbtのYAMLファイルのバージョン指定（常に2を使用）

sources:
  - name: tpch  # ソースの名前。後のモデルなどで source('tpch', 'orders') のように参照する
    description: source tpch data  # このソース全体に関する説明
    database: snowflake_sample_data  # データが存在するデータベース名（SnowflakeのサンプルDB）
    schema: tpch_sf1  # データが存在するスキーマ名

    tables:
      - name: orders  # ソーステーブル名
        description: main order tracking table  # テーブルの説明

        columns:
          - name: o_orderkey  # カラム名
            description: SF*1,500,000 are sparsely populated  # このカラムの意味・特性の説明
            tests:  # このカラムに対して実行するテスト
              - unique     # 一意性のテスト（重複がないか）
              - not_null   # NULL値がないことを確認するテスト

      - name: lineitem  # 別のソーステーブル
        description: main lineitem table  # このテーブルの説明

        columns:
          - name: l_orderkey  # 注文キー（ordersテーブルとリレーションがある）
            description: Foreign Key to O_ORDERKEY  # orders.o_orderkey に対する外部キー
            tests:
              - relationships:  # リレーションシップテスト（外部キー制約のような役割）
                  to: source('tpch', 'orders')  # 対象の参照先（ordersテーブル）
                  field: o_orderkey  # 参照先のカラム名


【補足】
これにより、モデル内で次のように使えるようになります：

from {{ source('tpch', 'orders') }}
これがあることで、ソースとモデルの**データ系統（データの流れ）が明確になります。



【ステージングモデルを作成】
次のステップは、2つのデータソースのステージングモデルを設定することです。ステージングモデルと対応するソーステーブルの間には1対1の関係があるため、ここでは2つのステージングモデルを構築します。

(ordersテーブル側から作成)
with 

-- "source" CTE: ソーステーブル（生データ）を読み込む
source as (

    select * from {{ source('tpch', 'orders') }}  -- dbtのsource関数を使って、定義済みのordersテーブルから全カラムを取得

),

-- "renamed" CTE: 取得したデータの列を、整形・命名の統一のために再選択（ただしこの例では名前変更していない）
renamed as (

    select
        o_orderkey,        -- 注文ID（そのまま）
        o_custkey,         -- 顧客ID（そのまま）
        o_orderstatus,     -- 注文ステータス（そのまま）
        o_totalprice,      -- 合計金額（そのまま）
        o_orderdate,       -- 注文日（そのまま）
        o_orderpriority,   -- 注文優先度（そのまま）
        o_clerk,           -- 担当者（そのまま）
        o_shippriority,    -- 配送優先度（そのまま）
        o_comment          -- 注文コメント（そのまま）

    from source

)

-- 最終的な出力：整形されたデータをSELECT（この場合は列名変更せずそのまま出力）
select * from renamed



(linetimeテーブル側の作成)
with source as (

    -- ソーステーブル "lineitem" を読み込む（tpch_sources.yml で定義したもの）
    select * from {{ source('tpch', 'lineitem') }}

),

renamed as (

    -- 読み込んだデータに対し、列のリネームと新しいキーの作成を実施
    select

        -- 複数列（l_orderkey + l_linenumber）からサロゲートキー（order_item_key）を作成(複数のカラムから一意なキー（order_item_key）を生成)
        {{ dbt_utils.surrogate_key(
            ['l_orderkey', 
            'l_linenumber']) }}
                as order_item_key,

        -- 元の列名から、意味のわかりやすい名前にリネーム
        l_orderkey as order_key,                    -- 注文ID
        l_partkey as part_key,                      -- 商品ID
        l_suppkey as supplier_key,                  -- 仕入先ID
        l_linenumber as line_number,                -- 注文明細番号
        l_quantity as quantity,                     -- 数量
        l_extendedprice as extended_price,          -- 明細金額（単価×数量）
        l_discount as discount_percentage,          -- 割引率
        l_tax as tax_rate,                          -- 税率
        l_returnflag as return_flag,                -- 返品フラグ
        l_linestatus as status_code,                -- ステータス
        l_shipdate as ship_date,                    -- 出荷日
        l_commitdate as commit_date,                -- コミット日（確定日）
        l_receiptdate as receipt_date,              -- 受領日
        l_shipinstruct as ship_instructions,        -- 配送指示
        l_shipmode as ship_mode,                    -- 配送方法
        l_comment as comment                        -- コメント欄

    from source

)

-- 整形済みデータを出力
select * from renamed


【補足】
dbt_utils.surrogate_key の中で何をしているの？
これは、複数のカラムの値を組み合わせて、一意なID（キー）を1つの文字列として作る関数です。

🔧 やっていること（簡単な流れ）：
l_orderkey = 12345

l_linenumber = 1

両方をつなげて：12345||1 = '12345-1' のような形にする

それを SHA1 でハッシュ → a1b2c3d4e5f6... のような文字列に変換
