■マテリアライズドビュー

CREATE OR REPLACE MATERIALIZED VIEW ticket_mv
AS (
SELECT
e.eventname as eventname
sum(s.priceaid)as total_sales
FROM event as e, sales s
WHERE e.eventid = s.eventid
GROUP BY e.ename
)

①更新
refresh materialized view aaa_mv;

②呼び出し
select * from mat_view_demo.tiket_mv order by eventname

■プロシージャ
CREATE OR REPLACE PROCEDURE update_sales_price(v_sales_id INT, v_new_price DECIMAL(8,2))
LANGUAGE plpsql
AS $$
BEGIN
  UPDATE sales SET pricepaid = v_new_price
  WHERE salesid = v_sales_id;
  IF NOT FOUND THEN
     RAISE NOTICE "aaaa.%.",
      v_sales_id;
   END IF;
END;
$$

■UDF(ユーザ定義関数)
CREATE OR REPLACE FUNCTION f_concat_ws(s1 VARCHAR, v2 VARCHAR)
RETURNS VARCHAR
STABLE
$$
SELECT CONCAT($1, CONCAT(' ', $2))
$$ LANGUAGE sql

■DML関連
①UPDATE
update sales set pricepaid = pricepaid*2 where eventid i (select eventid from event where eventname = '.38 Special')

■分散キーの特定方法(distkey=trueのこと)
select "column", type, distkey
from pg_table_def where tablename = 'users' and scheamaname='public';

■ノードの中のスライスを確認する
select slice,col,num_values as rows, minvalue, maxvalue
from svv_diskage
where name='users' and tbl = (slelect table_id from svv_table_info s where s.schema='public' and s.table='users')
and col=0
and num_values>0
order by slice, col;


■evenスライスのtable作成
create table usereven diststyle even as
select * from users;


■ソートキーの割り当て
create table users_customer_sort sortkey (firstname, lastname) as 
select * from users;
