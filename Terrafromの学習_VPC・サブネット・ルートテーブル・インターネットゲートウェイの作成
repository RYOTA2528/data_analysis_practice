■ network.tf ■
#-------------------------------------------------------
# VPC
#-------------------------------------------------------
resource "aws_vpc" "vpc" {
  cidr_block = "192.168.0.0/20"
  instance_tenancy = "default"
  enable_dns_support = true
  enable_dns_hostnames = true
  assign_generated_ipv6_cidr_block = false

#以下は先ほどまでに定義したmain.tfにあるvariable並びにterraform.tfvarsのファイルにある変数から取得してる
  tags = {
    Name = "${var.project}-${var.environment}-vpc"
    Project = var.project
    Env = var.environment
  }
}

# 余談ですが、"aws_vpc" "vpc"　の"vpc"はTerraformの中での任意な識別子です。


#-------------------------------------------------------
# Subnet
#-------------------------------------------------------
resource "aws_subnet" "public_subnet_1a" {
  vpc_id = aws_vpc.vpc.id
  availability_zone = "ap-northeast-1a"
  cidr_block = "197.168.1.0/24"
  map_public_ip_on_launch = true #trueで自動的にパブリックIPを作成

  tags = {
    Name = "${var.project}-${var.environment}-public-subnet-1a"
    Project = var.project
    Env = var.environment
    Type = "public"
  }

}

resource "aws_subnet" "public_private_1a" {
  vpc_id = aws_vpc.vpc.id
  availability_zone = "ap-northeast-1a"
  cidr_block = "197.168.1.0/24"
  map_public_ip_on_launch = true #trueで自動的にパブリックIPを作成

  tags = {
    Name = "${var.project}-${var.environment}-public-subnet-1a"
    Project = var.project
    Env = var.environment
    Type = "public"
  }

}


resource "aws_subnet" "public_subnet_1c" {
  vpc_id = aws_vpc.vpc.id
  availability_zone = "ap-northeast-1a"
  cidr_block = "197.168.1.0/24"
  map_public_ip_on_launch = true #trueで自動的にパブリックIPを作成

  tags = {
    Name = "${var.project}-${var.environment}-public-subnet-1a"
    Project = var.project
    Env = var.environment
    Type = "public"
  }

}


resource "aws_subnet" "public_private_1c" {
  vpc_id = aws_vpc.vpc.id
  availability_zone = "ap-northeast-1a"
  cidr_block = "197.168.1.0/24"
  map_public_ip_on_launch = true #trueで自動的にパブリックIPを作成

  tags = {
    Name = "${var.project}-${var.environment}-public-subnet-1a"
    Project = var.project
    Env = var.environment
    Type = "public"
  }

}

#-------------------------------------------------------
# ルートテーブル
#-------------------------------------------------------
#※先ほどまでに作成したPublicサブネット2個とPrivateサブネット2個をそれぞれ
 #「パブリックネットワーク」「プライベートネットワーク」として紐づけるための作業

#ルートテーブル
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.vpc.id
  tags = {
    Name = "${var.project}-${var.environment}-public-rt"
    Project = var.project
    Env = var.environment
    Type = "public"
  }
}

#ルートテーブルアソシエーション
resource "aws_route_table_association" "public_rt_1a" {
    route_table_id = aws_route_table.public_rt.id
    subnet_id = aws_subnet.public_subnet_1a.id
}

resource "aws_route_table_association" "public_rt_1c" {
    route_table_id = aws_route_table.public_rt.id
    subnet_id = aws_subnet.public_subnet_1c.id
}


resource "aws_route_table_association" "private_rt_1a" {
    route_table_id = aws_route_table.private_rt.id
    subnet_id = aws_subnet.private_subnet_1a.id
}


resource "aws_route_table_association" "private_rt_1c" {
    route_table_id = aws_route_table.private_rt.id
    subnet_id = aws_subnet.private_subnet_1c.id
}


#-------------------------------------------------------
# インターネットゲートウェイ
#-------------------------------------------------------
#インターネットゲートウェイ
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "${var.project}-${var.environment}-igw"
    Project = var.project
    Env = var.environment
  }
}


#ルート(インターネットゲートウェイとルートテーブルをつなげる役割)
resource "aws_route" "public_rt_igw_r" {
  route_table_id = aws_route_table.public_rt.id
  destination_cidr_block = "0.0.0.0/0" #外部に出る先を指定(今回は全域指定)
  gateway_id = aws_internet_gateway.igw.id
}


■ コマンド ■
terraform fmt
↓
terrafrom plan
↓
terraform apply -auto-approve ←"y"の確認せずに進める
